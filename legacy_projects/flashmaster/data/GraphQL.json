{
  "What is GraphQL?": {
    "A query language for APIs and a runtime to fulfill those queries": "right",
    "A NoSQL database query language": "wrong",
    "A front-end web development framework": "wrong",
    "A programming language for data analysis": "wrong"
  },
  "Who developed GraphQL?": {
    "Facebook": "right",
    "Google": "wrong",
    "Amazon": "wrong",
    "Microsoft": "wrong"
  },
  "In what year was GraphQL open-sourced to the public?": {
    "2015": "right",
    "2012": "wrong",
    "2017": "wrong",
    "2010": "wrong"
  },
  "How many HTTP endpoints does a typical GraphQL API use?": {
    "One single endpoint for all queries": "right",
    "Multiple endpoints, one per resource": "wrong",
    "Two endpoints (one for queries and one for mutations)": "wrong",
    "One endpoint per data type": "wrong"
  },
  "Which of the following is an advantage of using GraphQL over REST?": {
    "Clients can request exactly the data they need (no over-fetching)": "right",
    "It uses multiple endpoints for better separation": "wrong",
    "It automatically caches all queries on the client": "wrong",
    "It enforces a fixed response format for all queries": "wrong"
  },
  "What is a key characteristic of GraphQL's schema?": {
    "It is strongly typed, defining types for all data and operations": "right",
    "It is optional and can be generated at runtime": "wrong",
    "It only supports a few fixed data types": "wrong",
    "It is the same as a traditional SQL schema": "wrong"
  },
  "How does GraphQL handle versioning of an API?": {
    "It avoids versioning by evolving the schema with new fields and deprecations": "right",
    "It versions APIs by default like v1, v2, etc. for breaking changes": "wrong",
    "It requires clients to specify a version number in each query": "wrong",
    "It uses semantic versioning in the GraphQL query syntax": "wrong"
  },
  "What does the root \"Query\" type represent in a GraphQL schema?": {
    "Read operations to fetch data (the entry point for queries)": "right",
    "Operations to modify data (like create/update)": "wrong",
    "Real-time update operations": "wrong",
    "Error handling operations": "wrong"
  },
  "What is a \"mutation\" in GraphQL?": {
    "An operation used to modify data (create, update, or delete)": "right",
    "A read-only query operation": "wrong",
    "A real-time subscription event": "wrong",
    "A rollback operation for errors": "wrong"
  },
  "Which GraphQL operation type is used for real-time updates?": {
    "Subscriptions": "right",
    "Queries": "wrong",
    "Mutations": "wrong",
    "Polling": "wrong"
  },
  "Which of the following is a default scalar type in GraphQL?": {
    "Boolean": "right",
    "Decimal": "wrong",
    "DateTime": "wrong",
    "Character": "wrong"
  },
  "What is a GraphQL schema?": {
    "A type system that defines the data structure and operations (queries/mutations) available": "right",
    "A diagram of database tables and relationships": "wrong",
    "A configuration file for the GraphQL server's settings": "wrong",
    "A set of UI components for displaying data": "wrong"
  },
  "How are errors returned in a GraphQL response?": {
    "Errors are included in an \"errors\" array in the JSON response (alongside any data)": "right",
    "GraphQL relies solely on HTTP status codes for errors": "wrong",
    "Errors are not reported to the client in GraphQL": "wrong",
    "The server throws exceptions that the client must catch": "wrong"
  },
  "Can GraphQL be used together with traditional REST APIs in one project?": {
    "Yes, GraphQL can coexist with REST, and they can be used side by side": "right",
    "No, using GraphQL requires replacing all REST endpoints": "wrong",
    "Only during a transition period, then REST must be removed": "wrong",
    "Yes, but GraphQL will automatically convert REST calls behind the scenes": "wrong"
  },
  "How does GraphQL address the issues of over-fetching and under-fetching of data?": {
    "By allowing clients to request only the specific fields they need in a single request": "right",
    "By enabling multiple round-trip requests to gather data": "wrong",
    "By caching all data on the client by default": "wrong",
    "By automatically compressing responses to reduce size": "wrong"
  },
  "How do you supply variables to a GraphQL query?": {
    "By using $variableName in the query and passing a separate variables object with values": "right",
    "By concatenating strings into the query at runtime": "wrong",
    "GraphQL does not support variable binding in queries": "wrong",
    "By using @var syntax inside the query string": "wrong"
  },
  "What is the purpose of a fragment in GraphQL?": {
    "To define reusable sets of fields that can be used in multiple queries": "right",
    "To break a large query into smaller HTTP requests": "wrong",
    "To fragment the database transactions for scalability": "wrong",
    "To version parts of the GraphQL schema separately": "wrong"
  },
  "What is a GraphQL alias used for?": {
    "Renaming a field's result in the response, often to fetch the same field with different arguments": "right",
    "Defining an alternate name for a type in the schema": "wrong",
    "Specifying an alternate server to resolve a field": "wrong",
    "Mapping a GraphQL type to a database table name": "wrong"
  },
  "What does the @include directive do in a GraphQL query?": {
    "It conditionally includes a field in the result based on a given argument (if true)": "right",
    "It includes an authentication token with the query": "wrong",
    "It loops over a list of results to include each item": "wrong",
    "It marks a field as included in schema introspection": "wrong"
  },
  "In a GraphQL schema, what does an exclamation mark (!) after a type mean?": {
    "The field is non-nullable (must always have a value)": "right",
    "The field is an array type": "wrong",
    "The field is deprecated": "wrong",
    "The field is experimental": "wrong"
  },
  "How do you denote a list (array) type in GraphQL's schema language?": {
    "By wrapping the type in square brackets, e.g. [TypeName]": "right",
    "By adding an asterisk after the type, e.g. TypeName*": "wrong",
    "By writing the type followed by \"Array\"": "wrong",
    "By using angle brackets, e.g. <TypeName>": "wrong"
  },
  "Which scalar type is provided by GraphQL for unique identifier values?": {
    "ID": "right",
    "UUID": "wrong",
    "GUID": "wrong",
    "Key": "wrong"
  },
  "In GraphQL, what is a resolver?": {
    "A function that fetches or computes the value for a field when a query is executed": "right",
    "A GraphQL query written in SQL": "wrong",
    "A tool to merge multiple GraphQL schemas": "wrong",
    "A client-side cache for GraphQL responses": "wrong"
  },
  "What do you need to do to set up a GraphQL API on a server?": {
    "Define a schema (types and fields) and provide resolver functions for each field": "right",
    "Define REST endpoints for each query and mutation": "wrong",
    "Install a GraphQL database to store the schema and data": "wrong",
    "Write SQL queries for each possible GraphQL query": "wrong"
  },
  "What is GraphQL introspection?": {
    "A feature that allows querying the schema itself to discover types and fields": "right",
    "A testing tool for debugging GraphQL queries": "wrong",
    "An optimization that pre-fetches data for queries": "wrong",
    "A way to trace the performance of resolvers on the server": "wrong"
  },
  "What is GraphiQL?": {
    "An in-browser IDE (interactive editor) for writing and testing GraphQL queries": "right",
    "A variant of the GraphQL query language for graphs": "wrong",
    "A command-line tool for generating GraphQL schemas": "wrong",
    "The official GraphQL server implementation": "wrong"
  },
  "What is the GraphQL Playground?": {
    "A popular web-based GUI for exploring GraphQL APIs (similar to GraphiQL)": "right",
    "A testing environment for NoSQL databases": "wrong",
    "A sandbox for graph database queries like Neo4j": "wrong",
    "A game that teaches GraphQL concepts": "wrong"
  },
  "What is Apollo Client used for in the context of GraphQL?": {
    "Managing GraphQL queries and state on the client side (e.g., in a web app)": "right",
    "Implementing a GraphQL server in Node.js": "wrong",
    "Storing GraphQL schemas in a database": "wrong",
    "Generating HTML from GraphQL queries": "wrong"
  },
  "What is Apollo Server?": {
    "A library for building GraphQL servers in JavaScript/Node.js": "right",
    "A web server for serving static files and assets": "wrong",
    "A database specifically designed for GraphQL queries": "wrong",
    "A GraphQL client for mobile applications": "wrong"
  },
  "In the context of GraphQL, what is Relay?": {
    "A JavaScript client library from Facebook for building GraphQL-based applications, focusing on efficient data fetching": "right",
    "A tool for routing GraphQL queries to multiple servers": "wrong",
    "A module for caching GraphQL responses on the server": "wrong",
    "An alternative query language used for graph databases": "wrong"
  },
  "How are arguments specified for fields in a GraphQL query?": {
    "By writing them in parentheses after the field name (e.g., fieldName(arg: \"value\"))": "right",
    "By appending them as query parameters in the URL": "wrong",
    "By defining them in a special arguments section at the top of the query": "wrong",
    "By passing them in HTTP headers with a specific prefix": "wrong"
  },
  "How is GraphQL different from SQL?": {
    "GraphQL is not tied to a specific database; it's used to query data from an API, not directly from a database": "right",
    "GraphQL is just a variant of SQL for graph databases": "wrong",
    "GraphQL uses SQL under the hood to fetch data": "wrong",
    "There is no difference; GraphQL is a type of SQL database": "wrong"
  },
  "Is GraphQL tied to any specific database or storage engine?": {
    "No, GraphQL is database-agnostic and works with any backend or data source": "right",
    "Yes, it requires a graph database to function": "wrong",
    "Yes, it only works with relational databases": "wrong",
    "Yes, it only works with NoSQL databases": "wrong"
  },
  "In what format does a GraphQL server typically return data?": {
    "JSON": "right",
    "XML": "wrong",
    "Plain text": "wrong",
    "YAML": "wrong"
  },
  "GraphQL is typically served over which protocol?": {
    "HTTP (usually via a single HTTP endpoint)": "right",
    "FTP": "wrong",
    "SMTP": "wrong",
    "Bluetooth": "wrong"
  },
  "How do you write a comment in a GraphQL query or schema definition?": {
    "Using the # symbol before the comment text": "right",
    "Using // for single-line comments": "wrong",
    "Using <!-- --> around the comment": "wrong",
    "Comments are not supported in GraphQL": "wrong"
  },
  "How can you mark a field in a GraphQL schema as deprecated?": {
    "By using the @deprecated directive with an optional reason": "right",
    "By removing it from the schema definition file": "wrong",
    "By prefixing the field name with DEPRECATED_": "wrong",
    "By using a version number in the field name": "wrong"
  },
  "What is a GraphQL interface?": {
    "An abstract type that defines a set of fields that other types must include if they implement the interface": "right",
    "A hardware interface for connecting GraphQL servers": "wrong",
    "A user interface for a GraphQL API": "wrong",
    "Another term for the GraphQL schema": "wrong"
  },
  "What is a GraphQL union type?": {
    "A type that can represent one of several different object types (without sharing fields like an interface)": "right",
    "A combined query that joins results of two queries": "wrong",
    "A grouping of fields in the schema for permission purposes": "wrong",
    "An outdated term for a many-to-many relationship": "wrong"
  },
  "What is a GraphQL input type used for?": {
    "Defining complex object types for arguments (often used in mutations)": "right",
    "Specifying the format of the GraphQL query string": "wrong",
    "Declaring environment variables for the GraphQL server": "wrong",
    "Indicating a read-only type in the schema": "wrong"
  },
  "Why is GraphQL considered \"language agnostic\"?": {
    "It is a specification that can be implemented in any programming language": "right",
    "It only uses a universal language (GraphQL language) and no other languages": "wrong",
    "GraphQL queries are translated to Esperanto internally": "wrong",
    "It requires using the GraphQL programming language created by Facebook": "wrong"
  },
  "How is authentication usually handled in a GraphQL API?": {
    "By using middleware or context to pass auth tokens and checking them in resolvers": "right",
    "GraphQL has a built-in authentication mechanism by default": "wrong",
    "Using a special query type that handles login and restricts data automatically": "wrong",
    "By defining auth rules in the schema that GraphQL enforces internally": "wrong"
  },
  "What is the \"N+1 problem\" in GraphQL and how is it commonly mitigated?": {
    "It refers to issuing many database calls due to naive nested resolvers, mitigated by batching or tools like DataLoader": "right",
    "It describes needing one extra query for authentication on each request, solved by caching tokens": "wrong",
    "It refers to GraphQL requiring N+1 schemas for N microservices, solved by schema stitching": "wrong",
    "It is the limit of nested queries GraphQL allows (N+1 levels deep), fixed by increasing server recursion limit": "wrong"
  },
  "How are GraphQL queries typically sent over HTTP from client to server?": {
    "As an HTTP POST request to a single endpoint (often carrying the query and variables in the request body)": "right",
    "As multiple GET requests for each field requested": "wrong",
    "Via WebSocket messages only, not using HTTP at all": "wrong",
    "Through a custom GraphQL-specific protocol instead of HTTP": "wrong"
  },
  "GraphQL subscriptions are often implemented using which technology?": {
    "WebSockets (for pushing real-time updates from server to client)": "right",
    "Regular HTTP requests polling in a loop": "wrong",
    "Email notifications for each update": "wrong",
    "Database triggers that directly call the client": "wrong"
  },
  "How can a GraphQL query retrieve related objects (like a user and their posts) in one request?": {
    "By nesting the related fields inside the query, retrieving both user and posts in one round trip": "right",
    "By making multiple sequential queries, one for user then one for posts": "wrong",
    "By using a JOIN statement in the GraphQL query": "wrong",
    "By calling a special batch endpoint for related data": "wrong"
  },
  "In a GraphQL response, under which top-level field does the returned data appear?": {
    "\"data\"": "right",
    "\"result\"": "wrong",
    "\"response\"": "wrong",
    "\"payload\"": "wrong"
  },
  "What happens if a GraphQL query asks for a field that is not defined in the schema?": {
    "The query fails validation and returns an error without executing": "right",
    "The field is ignored and omitted from the response without any error": "wrong",
    "GraphQL automatically fetches it if the database has that field": "wrong",
    "The query returns null for that field but no errors are reported": "wrong"
  },
  "A GraphQL query is analogous to which HTTP method in a RESTful API?": {
    "GET (retrieve data without side effects)": "right",
    "POST": "wrong",
    "PUT": "wrong",
    "DELETE": "wrong"
  },
  "Does a GraphQL API require a predefined schema?": {
    "Yes – the schema (types and operations) must be defined for the GraphQL server to function": "right",
    "No – GraphQL can figure out the schema from the database automatically": "wrong",
    "No – the client defines the schema with each query": "wrong",
    "Only if you use GraphQL with a typed language like TypeScript": "wrong"
  }
}
